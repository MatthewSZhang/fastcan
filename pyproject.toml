[project]
name = "fastcan"
version = "0.4.1"
description = "A fast canonical-correlation-based greedy search algorithm"
authors = [
    { name = "Matthew Sikai Zhang", email = "matthew.szhang91@gmail.com" },
]
requires-python = ">=3.10"
readme = "README.rst"
license = { file = "LICENSE" }

dependencies = ["scikit-learn>=1.7.0,!=1.7.1"]

classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
]

[project.urls]
homepage = "https://fastcan.readthedocs.io/en/latest/"
source = "https://github.com/scikit-learn-contrib/fastcan"
download = "https://pypi.org/project/fastcan/#files"
tracker = "https://github.com/scikit-learn-contrib/fastcan/issues"

[build-system]
requires = ["meson-python>=0.18.0", "Cython>=3.1.0", "scikit-learn>=1.7.0"]
build-backend = "mesonpy"

# Needed on Windows CI to compile with Visual Studio compiler
# otherwise Meson detects a MINGW64 platform and use MINGW64
# toolchain
[tool.meson-python.args]
setup = ['--vsenv']

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64", "linux-aarch64"]

[tool.pixi.dependencies]
python = ">=3.10"
scikit-learn = ">=1.7.0,!=1.7.1"

[tool.pixi.pypi-dependencies]
fastcan = { path = ".", editable = true }

[tool.pixi.build-dependencies]
cython = ">=3.1.0"
meson-python = ">=0.18.0"

[tool.pixi.feature.docs.dependencies]
pydata-sphinx-theme = "*"
matplotlib = "*"
pandas = "*"
sphinx-gallery = "*"
sphinx-design = "*"
sphinxcontrib-plantuml = "*"
jupyterlite-sphinx = "*"
jupyterlite-xeus = "*"
pip = "*" # Required by xeus environment creation
graphviz = "<13"

[tool.pixi.feature.docs.target.win-64.dependencies]
plantuml = "*"

[tool.pixi.feature.docs.target.linux-64.dependencies]
plantuml = "*"

[tool.pixi.feature.docs.target.osx-arm64.dependencies]
plantuml = "*"

[tool.pixi.feature.docs.target.osx-64.dependencies]
plantuml = "*"

[tool.pixi.feature.wasm.dependencies]
pip = "*"
pyodide-build = "*"
prettier = "*"

[tool.pixi.feature.asv.dependencies]
asv = "*"
libmambapy = "*"
conda-build = "*"

[tool.pixi.feature.jupyter.dependencies]
notebook = "*"
matplotlib = "*"
pyarrow = "*"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pandas = "*"

[tool.pixi.feature.static.dependencies]
# Static analysis tools
ruff = "*"
cython-lint = "*"
mypy = "*"
codespell = "*"


[tool.pixi.feature.build.dependencies]
python-build = "*"
pip = "*"

[tool.pixi.feature.nogil.dependencies]
python-freethreading = "*"

[tool.pixi.feature.nogil.pypi-dependencies]
scikit-learn = ">=1.7.0,!=1.7.1"
fastcan = { path = ".", editable = true }

[tool.pixi.feature.nogil.build-dependencies]
cython = ">=3.1.0"
meson-python = ">=0.18.0"

[tool.pixi.target.osx-64.build-dependencies]
compilers = "*"

[tool.pixi.target.osx-arm64.build-dependencies]
compilers = "*"

[tool.pixi.tasks]
time-h = "python -m timeit -n 5 -s 'import numpy as np; from fastcan import FastCan; X = np.random.rand(3000, 100); y = np.random.rand(3000, 20)' 's = FastCan(100, verbose=0).fit(X, y)'"
time-eta = "python -m timeit -n 5 -s 'import numpy as np; from fastcan import FastCan; X = np.random.rand(3000, 100); y = np.random.rand(3000, 20)' 's = FastCan(100, eta=True, verbose=0).fit(X, y)'"
profile-minibatch = { cmd = '''python -c "import cProfile; import numpy as np; from fastcan import minibatch; X = np.random.rand(100, 3000); y = np.random.rand(100, 20); cProfile.run('minibatch(X, y, 1000, 10, verbose=0)', sort='{{ SORT }}')"''', args = [{ arg = "SORT", default = "cumtime" }] }
time-narx = '''python -m timeit -n 1 -s "import numpy as np; from fastcan.narx import make_narx; rng = np.random.default_rng(5); X = rng.random((1000, 10)); y = rng.random((1000, 2)); m = make_narx(X, y, 10, max_delay=2, poly_degree=2, verbose=0)" "m.fit(X, y, coef_init='one_step_ahead', verbose=1)"'''
profile-narx = { cmd = '''python -c "import cProfile; import numpy as np; from fastcan.narx import make_narx; rng = np.random.default_rng(8); X = rng.random((3000, 3)); y = rng.random((3000, 3)); m = make_narx(X, y, 10, max_delay=10, poly_degree=2, verbose=0); cProfile.run('m.fit(X, y, coef_init=[0]*33)', sort='{{ SORT }}')"''', args = [{ arg = "SORT", default = "tottime" }] }

[tool.pixi.feature.asv.tasks]
asv-build = { cmd = "python -m asv machine --machine {{ MACHINE }} --yes && python -m asv run --show-stderr -v --machine {{ MACHINE }} {{ EXTRA_ARGS }}", cwd = "asv_benchmarks", args = [{ arg = "MACHINE", default = "MacOS-M1" }, { arg = "EXTRA_ARGS", default = "" }] }
asv-publish = { cmd = "python -m asv publish", cwd = "asv_benchmarks" }
asv-preview = { cmd = "python -m asv preview", cwd = "asv_benchmarks", depends-on = ["asv-publish"] }

[tool.pixi.feature.test.tasks]
test = "pytest"
test-coverage = { cmd = "rm -rf .coverage && pytest --cov-report {{ FMT }} --cov={{ PACKAGE }}", args = [{ arg = "FMT", default = "html" }, { arg = "PACKAGE", default = "fastcan" }] }

[tool.pixi.feature.build.tasks]
build-wheel = "rm -rf dist && python -m build -wnx -Cinstall-args=--tags=runtime,python-runtime,devel"
build-sdist = "rm -rf dist && python -m build --sdist"
rebuild = "rm -rf build && pip install --no-deps --force-reinstall -e ."

[tool.pixi.feature.static.tasks]
fmt = "ruff format"
lint = "ruff check . --fix"
cython-lint = { cmd = "cython-lint .", cwd = "fastcan" }
type = { cmd = "mypy . --ignore-missing-imports", cwd = "fastcan" }
spell = "codespell fastcan"

[tool.pixi.feature.docs.tasks]
doc = { cmd = "{{ SPHINXBUILD }} -M {{ CMD }} {{ SOURCEDIR }} {{ BUILDDIR }} {{ SPHINXOPTS }} --fail-on-warning", cwd = "doc", args = [{ arg = "SPHINXBUILD", default = "sphinx-build" }, { arg = "CMD", default = "html" }, { arg = "SOURCEDIR", default = "." }, { arg = "BUILDDIR", default = "_build" }, { arg = "SPHINXOPTS", default = "" }] }
doc-clean = { cmd = "rm -rf {{ BUILDDIR }} generated auto_examples jupyterlite_contents .jupyterlite.doit.db _contents _output .cache", cwd = "doc", args = [{ arg = "BUILDDIR", default = "_build" }] }
doc-deploy = { cmd = "python -m http.server" , cwd = "doc/_build/html" }
doc-plantuml = { cmd = "plantuml -tsvg {{ SOURCE }} -o {{ OUTPUT }}", cwd = "doc", args = [{ arg = "SOURCE", default = "diagram.puml" }, { arg = "OUTPUT", default = "_build" }] }
# The setting (pixi config set --local run-post-link-scripts insecure) is required before install the environment,
# otherwise graphviz will not generate its plugin config. See:
# https://github.com/prefix-dev/pixi/blob/8aad97b5ac6482cdf0d3167fdaf0cb26328cc9c4/CHANGELOG.md?plain=1#L899
doc-plantuml-test = "plantuml -testdot"
doc-jupyterlite-debug = { cmd = "jupyter-lite build --debug --output-dir {{ OUTPUT }}", cwd = "doc", args = [{ arg = "OUTPUT", default = "_output" }] }


[tool.pixi.feature.nogil.tasks]
nogil-h = "python -Xgil=0 -m timeit -n 5 -s 'import numpy as np; from fastcan import FastCan; X = np.random.rand(3000, 100); y = np.random.rand(3000, 20)' 's = FastCan(100, verbose=0).fit(X, y)'"
nogil-eta = "python -Xgil=0 -m timeit -n 5 -s 'import numpy as np; from fastcan import FastCan; X = np.random.rand(3000, 100); y = np.random.rand(3000, 20)' 's = FastCan(100, eta=True, verbose=0).fit(X, y)'"

[tool.pixi.feature.wasm.tasks]
emsdk-clone = "bash -c '[ -d emsdk ] || git clone https://github.com/emscripten-core/emsdk.git emsdk'"
pyodide-compatible = "pyodide xbuildenv search -a"
pyodide-toolchain = { cmd = "LATEST_COMPATIBLE=$(pyodide xbuildenv search -a | grep '│ Yes' | head -n 1 | awk -F '│' '{print $2}' | xargs) && pyodide xbuildenv install $LATEST_COMPATIBLE" }
emsdk-setup = { cmd = "PYODIDE_EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) && ./emsdk install $PYODIDE_EMSCRIPTEN_VERSION && ./emsdk activate $PYODIDE_EMSCRIPTEN_VERSION", cwd = "emsdk", depends-on = ["emsdk-clone", "pyodide-toolchain"] }
pyodide-build = { cmd = "bash -c 'source emsdk/emsdk_env.sh && pyodide build'", depends-on = ["emsdk-setup"] }
pyodide-create-recipe = "rm -rf packages && pyodide skeleton pypi fastcan"
pyodide-build-recipe = { cmd = "rm -rf dist && bash -c 'source emsdk/emsdk_env.sh && pyodide build-recipes fastcan --install'", depends-on = ["emsdk-setup"] }
pyodide-download = '''bash -c "[ -d pyodide ] || (LATEST_TAG=$(curl -s https://api.github.com/repos/pyodide/pyodide/releases/latest | grep \"tag_name\" | cut -d \" -f4) && curl -L https://github.com/pyodide/pyodide/releases/download/${LATEST_TAG}/pyodide-${LATEST_TAG}.tar.bz2 | tar -xjf -)"'''
pyodide-test-recipe = { cmd = "mv ../dist/* . && python -m http.server --directory .", cwd = "pyodide", depends-on = ["pyodide-download", "pyodide-build-recipe"] }

[tool.pixi.environments]
dev = ["test", "build", "jupyter", "asv"]
docs = ["docs"]
static = { features = ["static"], no-default-feature = true }
nogil = { features = ["nogil"], no-default-feature = true }
wasm = { features = ["wasm"], no-default-feature = true }

[tool.pytest.ini_options]
testpaths = [ 
    "./tests",
    "./fastcan/narx/tests",
]

[tool.coverage.run]
omit = ["**/tests/*"]

[tool.codespell]
skip = [
    "./doc/_build",
    "./doc/auto_examples",
    "./doc/generated",
    "./htmlcov",
    "./build",
    "./pixi.lock",
    "./asv_benchmarks/env",
    "./asv_benchmarks/html",
    "./asv_benchmarks/results",
    "./asv_benchmarks/benchmarks/cache",
    "./emsdk",
]
ignore-words-list = [
    "MIS", # magnetic impedance spectroscopy (MIS)
]

[tool.ruff]
line-length = 88

exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "doc/_build",
    "doc/auto_examples",
    "asv_benchmarks/env",
    "asv_benchmarks/html",
    "asv_benchmarks/results",
    "asv_benchmarks/benchmarks/cache",
]

[tool.ruff.lint]
# This enables us to use CPY001: copyright header check
preview = true
# This enables us to use the explicit preview rules that we want only
explicit-preview-rules = true
# all rules can be found here: https://docs.astral.sh/ruff/rules/
extend-select = ["E501", "W", "I", "CPY001", "PGH", "RUF"]
ignore = [
    # do not assign a lambda expression, use a def
    "E731",
    # do not use variables named 'l', 'O', or 'I'
    "E741",
    # E721 gives many false positives.
    # Use `is` and `is not` for type comparisons, or `isinstance()` for
    # isinstance checks
    "E721",
    # We don't care much about F841.
    # Local variable ... is assigned to but never used
    "F841",
    # some RUF rules trigger too many changes
    "RUF002",
    "RUF003",
    "RUF005",
    "RUF012",
    "RUF015",
    "RUF021",
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
]

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\#\\ Authors:\\ The\\ fastcan\\ developers\\\r?\\\n\\#\\ SPDX\\-License\\-Identifier:\\ MIT"

[tool.ruff.lint.per-file-ignores]
# It's fine not to put the import at the top of the file in the examples
# folder.
"examples/*" = ["E402"]
"doc/conf.py" = ["E402"]
"**/tests/*" = ["CPY001"]
"doc/*" = ["CPY001"]
".github/*" = ["CPY001"]
"asv_benchmarks/*" = ["CPY001", "TID252"]

[tool.cython-lint]
# Ignore the same error codes as ruff
# + E501 (line too long) because keeping it < 88 in cython
# often makes code less readable.
ignore = [
    # multiple spaces/tab after comma
    'E24',
    # line too long
    'E501',
    # do not assign a lambda expression, use a def
    'E731',
    # do not use variables named 'l', 'O', or 'I'
    'E741',
    # line break before binary operator
    'W503',
    # line break after binary operator
    'W504',
]
